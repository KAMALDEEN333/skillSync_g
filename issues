# Project Issues for SkillSync

## Project Overview
SkillSync is a decentralized mentorship marketplace that empowers professionals and learners by bridging the gap between experienced mentors and eager mentees. The platform leverages AI-powered matching to create personalized learning experiences across various domains including technology, business, and digital skills. By integrating blockchain-powered smart contracts, SkillSync ensures secure agreements, seamless session bookings, and milestone-based rewards.

The ecosystem is built with a dual focus on robust backend services and decentralized contract management. The server side, developed using NestJS and TypeScript, supports intelligent mentor matching, real-time session management, secure payment processing, and comprehensive profile management. Meanwhile, the smart contract system, implemented in Cairo on StarkNet, handles freelance work agreements, ensuring transparent and efficient contract creation, user registration, payment processing, and dispute resolution.

---

## Issues

### Issue 1: Redis Integration Module
**Description:**
Integrate Redis into the NestJS backend to enable caching, pub/sub, or other Redis-based features. Create a centralized `RedisModule` that can be imported across the app, and ensure the Redis client is injectable as a service.

**Acceptance Criteria:**
- Redis client package (ioredis or redis) is installed.
- `RedisModule` is created and properly configured.
- Redis connection parameters are loaded from environment variables.
- Redis client is exported as a provider and can be injected into other modules.

---

### Issue 2: Secure Redis Configuration
**Description:**
Ensure that all Redis connection parameters (host, port, password, etc.) are securely managed using environment variables. Update the `.env` file and validation logic accordingly.

**Acceptance Criteria:**
- `.env` file includes Redis configuration variables.
- Configuration is validated and securely loaded in the app.

---

### Issue 3: Sample Redis Use Case Implementation
**Description:**
Implement a sample use case (such as caching or pub/sub) to test the Redis integration. This should demonstrate that the Redis client works as expected within the NestJS application.

**Acceptance Criteria:**
- A sample service or controller demonstrates Redis caching or pub/sub.
- The feature is tested and confirmed to work.

---

### Issue 4: Modular and Maintainable Redis Setup
**Description:**
Ensure the Redis integration follows NestJS best practices for modularity and maintainability. The Redis module should be easy to update or enhance independently of other features.

**Acceptance Criteria:**
- Redis-related code is isolated in its own module.
- Other modules can import and use Redis services without tight coupling.
- The setup is documented for future maintainers.

---

## Additional NestJS Issues

### Issue 5: User Registration & Profile Management
**Description:**
Implement robust user registration and profile management features, including support for mentors and mentees, profile editing, and credential verification.

**Acceptance Criteria:**
- Users can register as mentors or mentees.
- Profile editing and credential upload/verification are supported.
- Profile data is securely stored and validated.

---

### Issue 6: Mentor Reputation System
**Description:**
Integrate a reputation system to track and display mentor credibility based on feedback, completed sessions, and ratings.

**Acceptance Criteria:**
- Mentors have a visible reputation score.
- Reputation is updated based on session outcomes and feedback.
- System is resistant to manipulation.

---

### Issue 7: Contract Creation & Validation
**Description:**
Develop robust contract creation and validation logic for mentor-mentee agreements, ensuring all required fields and milestones are present.

**Acceptance Criteria:**
- Contracts can be created, viewed, and validated.
- Milestone and payment details are included.
- Validation logic prevents incomplete or invalid contracts.

---

### Issue 8: Payment & Escrow Integration
**Description:**
Integrate token-based payment processing and escrow functionalities for secure transactions between mentors and mentees.

**Acceptance Criteria:**
- Token payments are supported and securely processed.
- Escrow logic holds funds until milestones are met.
- Automated invoicing and receipts are generated.

---

### Issue 9: Dispute Resolution System
**Description:**
Build a system for initiating and managing disputes, including a voting mechanism for fair resolution.

**Acceptance Criteria:**
- Users can initiate disputes on contracts.
- Dispute status and outcomes are tracked.
- Voting system is implemented for resolution.

---

### Issue 10: AI-Powered Mentor Matching
**Description:**
Implement AI-driven logic to match mentors and mentees based on skills, experience, and preferences.

**Acceptance Criteria:**
- Matching algorithm considers skills, experience, and user preferences.
- Search and filter options are available.
- Matching results are accurate and relevant.

---

### Issue 11: Session Scheduling & Video Integration
**Description:**
Enable real-time session scheduling with calendar integration and support for video conferencing.

**Acceptance Criteria:**
- Users can schedule, reschedule, and cancel sessions.
- Calendar integration is available.
- Video conferencing links are generated and managed.

---

### Issue 12: Feedback & Analytics System
**Description:**
Develop a feedback and analytics system to collect post-session ratings and provide performance metrics.

**Acceptance Criteria:**
- Users can leave feedback and ratings after sessions.
- Analytics dashboard displays performance and usage statistics.
- Data is aggregated and visualized securely.

---

## Folder Structure Scan

- `/server/src/auth/` — Authentication logic, DTOs, entities, guards, services, and strategies.
- `/server/src/config/` — Environment validation and configuration.
- `/server/src/database/` — Database modules, controllers, DTOs, entities, and services.
- `/server/src/mail/` — Mailing service.
- `/server/src/redis/` — Redis module (to be implemented).
- `/server/src/user/` — User module, controllers, DTOs, entities, and services.
- `/server/src/test/` — End-to-end tests and Jest configuration.

---

**Technical Stack:**
- Backend: NestJS, TypeScript, PostgreSQL, TypeORM, Passport.js, JWT
- Smart Contracts: Cairo, StarkNet
- Caching/Messaging: Redis (to be integrated)

---

**Next Steps:**
- Address the above issues to complete Redis integration and ensure maintainability.
